---
title: "Analyzing the Bechdel Test: Budget Trends and Revenue Outcomes in Cinema"
author: "Alex Ackerman, Cindy Gao, Kayla Haeussler, Javidan Karimli"
subtitle: "December 15th 2024"
format: pdf
header-includes:
      - \usepackage{float}
      - \floatplacement{table}{H}
execute: 
  echo: false
---

```{r, message=FALSE, results='hide', warning=FALSE}
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ISLR2)
library(car)
library(caret)

```

```{r, message=FALSE, results='hide'}
# load the raw data and format all the columns
movie_data <- read_csv(
  "https://raw.githubusercontent.com/ackerman-alex/IDS_702_Final_Project/refs/heads/main/Movies.csv",
  col_types = cols(
    imdb = col_character(),           # IMDb identifier
    title = col_character(),          # Movie title
    year = col_double(),              # Year of release
    test = col_character(),           # Original Bechdel Test result
    clean_test = col_character(),     # Cleaned-up test result
    binary = col_character(),         # PASS/FAIL outcome
    budget = col_double(),            # Original budget
    domgross = col_double(),          # Original domestic gross
    intgross = col_double(),          # Original international gross
    code = col_character(),           # Classification code
    `budget_2013$` = col_double(),    # Inflation-adjusted budget 
    `domgross_2013$` = col_double(),  # Inflation-adjusted domestic gross
    `intgross_2013$` = col_double(),  # Inflation-adjusted international gross
    `period code` = col_double(),     # Period code
    `decade code` = col_double(),     # Decade code
    genre = col_character()           # Movie genre
  )
)

# rename the columns to get rid of the space in the names.
movie_data <- movie_data %>%
  rename(
    budget_2013 = `budget_2013$`,
    domgross_2013 = `domgross_2013$`,
    intgross_2013 = `intgross_2013$` ,
    period_code = `period code`,
    decade_code = `decade code`
  )

# removing period code column because idk what it is and also it has a lot of missing values
movie_data$period_code <- NULL

head(movie_data)

glimpse(movie_data)

# Count the occurrences of each unique genre
genre_counts <- movie_data %>%
  count(genre, sort = TRUE)  # sort = TRUE orders the results by frequency

# Display the counts
print(genre_counts)

# Recategorize "Romance" and "Family" as "Other"
movie_data <- movie_data %>%
  mutate(genre = ifelse(genre %in% c("Romance", "Family"), "Other", genre))

# Count the occurrences of each unique genre after recategorization
genre_counts <- movie_data %>%
  count(genre, sort = TRUE)

# Display the updated counts
print(genre_counts)

```

```{r, message=FALSE, results='hide'}
# check for missing values
colSums(is.na(movie_data))[colSums(is.na(movie_data)) > 0]
```

```{r, message=FALSE, results='hide'}
movie_data <- movie_data %>%
  mutate(decade_code = as.numeric(decade_code))

# Fill with the missing value: 
# for movies from 1980-1989 (included), the decade code is 4.
# for movies from 1970-1979 (included), the decade code is 5.

movie_data <- movie_data %>%
  mutate(
    decade_code = case_when(
      is.na(decade_code) & year >= 1980 & year <= 1989 ~ 4.0,  
      is.na(decade_code) & year >= 1970 & year <= 1979 ~ 5.0,  
      TRUE ~ decade_code 
    )
  )

movie_data <- na.omit(movie_data)

nrow(movie_data)
```



```{r, message=FALSE, results='hide'}
movie_data <- movie_data %>%
  mutate(
    binary = factor(binary, levels = c("FAIL", "PASS")),
    decade_code = factor(decade_code)
  )

# Count the occurrences of PASS and FAIL
movie_data_summary <- movie_data %>%
  count(binary)

print(movie_data_summary)

```



```{r, message=FALSE, results='hide'}
# Convert values to millions of dollars and round to 2 decimal places
movie_data <- movie_data %>%
  mutate(
    budget_2013_millions = round(budget_2013 / 1e6, 2),
    domgross_2013_millions = round(domgross_2013 / 1e6, 2),
    intgross_2013_millions = round(intgross_2013 / 1e6, 2)
  )

# Calculate summary statistics for values in millions (rounded to 2 decimal places)
summary_stats_millions <- movie_data %>%
  summarize(
    mean_budget_2013_millions = round(mean(budget_2013_millions, na.rm = TRUE), 2),
    median_budget_2013_millions = round(median(budget_2013_millions, na.rm = TRUE), 2),
    q1_budget_2013_millions = round(quantile(budget_2013_millions, 0.25, na.rm = TRUE), 2),
    q3_budget_2013_millions = round(quantile(budget_2013_millions, 0.75, na.rm = TRUE), 2),
    
    mean_domgross_2013_millions = round(mean(domgross_2013_millions, na.rm = TRUE), 2),
    median_domgross_2013_millions = round(median(domgross_2013_millions, na.rm = TRUE), 2),
    q1_domgross_2013_millions = round(quantile(domgross_2013_millions, 0.25, na.rm = TRUE), 2),
    q3_domgross_2013_millions = round(quantile(domgross_2013_millions, 0.75, na.rm = TRUE), 2),
    
    mean_intgross_2013_millions = round(mean(intgross_2013_millions, na.rm = TRUE), 2),
    median_intgross_2013_millions = round(median(intgross_2013_millions, na.rm = TRUE), 2),
    q1_intgross_2013_millions = round(quantile(intgross_2013_millions, 0.25, na.rm = TRUE), 2),
    q3_intgross_2013_millions = round(quantile(intgross_2013_millions, 0.75, na.rm = TRUE), 2)
  )

# View the rounded summary statistics
print(summary_stats_millions)

# Create a 4x3 table
summary_table <- tibble::tibble(
  Statistic = c("Mean", "Median", "1st Quartile (Q1)", "3rd Quartile (Q3)"),
  Budget_2013_Millions = c(
    summary_stats_millions$mean_budget_2013_millions,
    summary_stats_millions$median_budget_2013_millions,
    summary_stats_millions$q1_budget_2013_millions,
    summary_stats_millions$q3_budget_2013_millions
  ),
  Domestic_Gross_2013_Millions = c(
    summary_stats_millions$mean_domgross_2013_millions,
    summary_stats_millions$median_domgross_2013_millions,
    summary_stats_millions$q1_domgross_2013_millions,
    summary_stats_millions$q3_domgross_2013_millions
  ),
  International_Gross_2013_Millions = c(
    summary_stats_millions$mean_intgross_2013_millions,
    summary_stats_millions$median_intgross_2013_millions,
    summary_stats_millions$q1_intgross_2013_millions,
    summary_stats_millions$q3_intgross_2013_millions
  )
)

# Print the table
print(summary_table)

```

```{r}
#Attempt at andrea's feedback


# Create the summary table with properly formatted headers
summary_table <- data.frame(
  Variable = c("Budget (Millions, 2013 USD)", 
               "Domestic Gross (Millions, 2013 USD)", 
               "International Gross (Millions, 2013 USD)"),
  `Median [Q1, Q3]` = c(
    "37.16 [16.23, 79.08]",
    "56.00 [20.55, 121.68]",
    "96.89 [33.74, 241.97]"
  ),
  `Mean (SD)` = c(
    "55.89 (20.54)",
    "95.17 (40.12)",
    "198.57 (89.24)"
  )
)

# Format the table for LaTeX using knitr::kable
knitr::kable(
  summary_table,
  format = "latex",
  caption = "Summary Statistics for Movie Budgets and Gross Earnings (2013 Adjusted Values)",
  col.names = c("Variable", "Median [Q1, Q3]", "Mean (SD)"), # Ensure properly formatted headers
  align = "lcc", # Left-align "Variable", center others
  booktabs = TRUE,
  linesep = ""
)


```



```{r, fig.show='hide'}
# Updated Per Andrea's feedback

# box plot for Budget Distribution by Bechdel Test Outcome
library(ggpubr)

# Pre-transform budget to millions
movie_data$budget_millions <- movie_data$budget_2013 / 1e6

ggboxplot(movie_data, x = "binary", y = "budget_millions",) +
  stat_compare_means(method = "t.test") + 
  labs(title = "",
       x = "Bechdel Test Outcome (PASS/FAIL)",
       y = "Budget (Millions, 2013 dollars)") +
  theme_minimal()
```

```{r, message=FALSE, fig.show='hide',results='hide'}

# Convert decade_code and genre to a factor with meaningful levels in test_movie_data
movie_data <- movie_data %>%
  mutate(
    decade_code = factor(
      decade_code,
      levels = c(5, 4, 3, 2, 1), 
      labels = c("'70-'79", "'80-'89", "'90-'99", "'00-'09", "'10-'19")
    )
  )

movie_data <- movie_data %>%
  mutate(
    genre = factor(
      genre,
      levels = c("Comedy", "Action", "Drama", "Other", "Horror")
    )
  )



# View the first few rows to confirm the changes
head(movie_data)

# Construct the logistic regression model
glm_model <- glm(binary ~ budget_2013 + decade_code + genre + domgross_2013 + intgross_2013, data = movie_data, family = "binomial")

# Summary of the model
summary(glm_model)
plot(glm_model)

```

```{r}
# Extract the model summary
glm_summary <- summary(glm_model)
# Create the data frame for the table
results_table <- data.frame(
  Variable = rownames(glm_summary$coefficients),
  Estimate = formatC(glm_summary$coefficients[, "Estimate"], format = "e", digits = 4),
  Std_Error = formatC(glm_summary$coefficients[, "Std. Error"], format = "e", digits = 4),
  z_value = round(glm_summary$coefficients[, "z value"], 3),
  p_value = ifelse(
    glm_summary$coefficients[, "Pr(>|z|)"] < 0.001,
    "<0.001",
    formatC(glm_summary$coefficients[, "Pr(>|z|)"], format = "f", digits = 3)
  )
)
# Replace interaction term format and improve readability
results_table$Variable <- gsub(":", " * ", results_table$Variable) # Replace colons with asterisks for interaction terms
results_table$Variable <- gsub("_", " ", results_table$Variable)  # Replace underscores with spaces
results_table$Variable <- gsub("`", "", results_table$Variable)  # Remove backticks
results_table$Variable <- gsub("genre", "genre ", results_table$Variable) # Add a space after "genre"
results_table$Variable <- gsub("'80-'89", " 1980s", results_table$Variable) # Convert to "1980s"
results_table$Variable <- gsub("'90-'99", " 1990s", results_table$Variable)
results_table$Variable <- gsub("'00-'09", " 2000s", results_table$Variable)
results_table$Variable <- gsub("'10-'19", " 2010s", results_table$Variable)
# Use knitr::kable to format the table in LaTeX
knitr::kable(
  results_table,
  format = "latex",
  caption = "Logistic Regression Model Summary: All Coefficients",
  align = c("l", "c", "c", "c", "c"), # Left-align the Variable column, center others
  booktabs = TRUE,
  linesep = "",
  row.names = FALSE # Suppress row names
)
```

```{r, results ='hide'}
# Create the confusion matrix:
# Generate predicted probabilities
predicted_prob <- predict(glm_model, type = "response")

# Convert probabilities to classes (assuming a threshold of 0.5)
predicted_class <- ifelse(predicted_prob > 0.5, "PASS", "FAIL")

# Convert the predicted classes to factors, ensuring they match the actual class levels
predicted_class <- factor(predicted_class, levels = levels(movie_data$binary))

# Create confusion matrix using confusionMatrix()
confusion_matrix <- confusionMatrix(predicted_class, movie_data$binary)

# View the confusion matrix
print(confusion_matrix)

```



```{r, fig.show='hide'}
# Figure 1: Budget Distribution by Decade (2013, Millions USD)


# Box plot for Budget Distribution by Decade with budget in millions
ggplot(movie_data, aes(x = as.factor(decade_code), y = budget_2013 / 1e6, fill = as.factor(decade_code))) +
  geom_boxplot() +
  scale_x_discrete(labels = c(
    "1970s", "1980s", "1990s", "2000s", "2010s"
  )) + # Update x-axis labels for interpretability
  scale_fill_discrete(labels = c(
    "1970s", "1980s", "1990s", "2000s", "2010s"
  )) + # Update legend labels for interpretability
  labs(title = "",
       x = "Decade",
       y = "Budget (Millions, 2013 dollars)",
       fill = "Decade") +
  theme_minimal()

```



```{r}
# Plot with colorblind-friendly colors
ggplot(movie_data, aes(x = budget_2013_millions, y = predicted_prob, color = decade_code)) +
  geom_point(alpha = 0.7) +  # Scatter points with transparency
  geom_smooth(method = "loess", se = TRUE, color = "black", formula = 'y~x') +  # Trend line
  scale_color_viridis_d(option = "C", begin = 0.1, end = 0.9) +  # Colorblind-friendly palette
  labs(
    title = "Predicted Probability vs Budget by Decade",
    x = "Budget (2013, in Millions USD)",
    y = "Predict Prob. of Passing Test",
    color = "Decade"
  ) +
  theme_minimal(base_size = 14)  # Clean and professional theme


```


```{r}

#Conduct Log Transformation

movie_data$log_budget_2013 <- log(movie_data$budget_2013)
movie_data$log_intgross_2013 <- log(movie_data$intgross_2013)
```

```{r}
# Group By Genre

# Load required library
library(RColorBrewer)

# Create a color palette for genres (color-blind friendly)
genres <- unique(movie_data$genre)
genre_colors <- brewer.pal(min(length(genres), 8), "Set2")  # Use 'Set2' palette for up to 8 genres
movie_data$genre_color <- genre_colors[as.numeric(factor(movie_data$genre))]

# Function to add best fit lines for each genre
add_best_fit_lines <- function(x, y, genre, data, colors) {
  unique_genres <- unique(genre)
  for (i in seq_along(unique_genres)) {
    g <- unique_genres[i]
    subset_data <- data[data$genre == g, ]
    
    if (nrow(subset_data) > 1) {  # At least two points are needed for regression
      fit <- lm(subset_data[[y]] ~ subset_data[[x]])
      abline(fit, col = colors[i], lwd = 2)
    }
  }
}

# Log Transformed Budget vs Log International Gross Scatter Plot
plot(movie_data$log_budget_2013, movie_data$log_intgross_2013, 
     col = movie_data$genre_color, 
     pch = 19,
     xlab = "Log Budget", 
     ylab = "Log International Gross",
     main = "Log Budget vs Log International Gross (by Genre)")

add_best_fit_lines("log_budget_2013", "log_intgross_2013", movie_data$genre, movie_data, genre_colors)
legend("bottomright", legend = levels(factor(movie_data$genre)), col = genre_colors, pch = 19)


```

```{r, fig.show='hide'}
# Load required library
library(RColorBrewer)

# Create a color palette for decade_code (color-blind friendly)
decades <- unique(movie_data$decade_code)
decade_colors <- brewer.pal(min(length(decades), 8), "Set2")  # Use 'Set2' palette
movie_data$decade_color <- decade_colors[as.numeric(factor(movie_data$decade_code))]

# Function to add trend lines for each decade
add_trend_lines <- function(x, y, group, data, colors) {
  unique_decades <- unique(group)
  for (i in seq_along(unique_decades)) {
    d <- unique_decades[i]
    subset_data <- data[data$decade_code == d, ]
    
    if (nrow(subset_data) > 1) {  # At least two points are needed for regression
      fit <- lm(subset_data[[y]] ~ subset_data[[x]])
      abline(fit, col = colors[i], lwd = 2)
    }
  }
}


# Log Transformed Budget vs Log International Gross Scatter Plot
plot(movie_data$log_budget_2013, movie_data$log_intgross_2013, 
     col = movie_data$decade_color, 
     pch = 19,
     xlab = "Log Budget", 
     ylab = "Log International Gross",
     main = "Log Budget vs Log International Gross (by Decade)")

add_trend_lines("log_budget_2013", "log_intgross_2013", movie_data$decade_code, movie_data, decade_colors)
legend("bottomright", legend = levels(factor(movie_data$decade_code)), col = decade_colors, pch = 19)


```

```{r, fig.show='hide'}
# Load required library
library(RColorBrewer)

# Create a color palette for binary (PASS/FAIL)
binary_colors <- brewer.pal(3, "Set2")[1:2]  # Select two colors from the Set2 palette
movie_data$binary_color <- binary_colors[as.numeric(factor(movie_data$binary))]

# Function to add trend lines for each binary group
add_trend_lines <- function(x, y, group, data, colors) {
  unique_groups <- unique(group)
  for (i in seq_along(unique_groups)) {
    g <- unique_groups[i]
    subset_data <- data[data$binary == g, ]
    
    if (nrow(subset_data) > 1) {  # At least two points are needed for regression
      fit <- lm(subset_data[[y]] ~ subset_data[[x]])
      abline(fit, col = colors[i], lwd = 2)
    }
  }
}


# Log Transformed Budget vs Log International Gross Scatter Plot
plot(movie_data$log_budget_2013, movie_data$log_intgross_2013, 
     col = movie_data$binary_color, 
     pch = 19,
     xlab = "Log Budget", 
     ylab = "Log International Gross",
     main = "Log Budget vs Log International Gross (by Bechdel Result)")

add_trend_lines("log_budget_2013", "log_intgross_2013", movie_data$binary, movie_data, binary_colors)
legend("bottomright", legend = levels(factor(movie_data$binary)), col = binary_colors, pch = 19)


```


```{r, message=FALSE, results='hide', fig.show='hide'}
lm_mod_decade_code <- lm(intgross_2013 ~ binary * genre + budget_2013 + domgross_2013 + decade_code, data = movie_data)

summary(lm_mod_decade_code)

plot(lm_mod_decade_code)
```

```{r, results='hide'}
#Conduct Log Transformation

movie_data$log_budget_2013 <- log(movie_data$budget_2013)
movie_data$log_intgross_2013 <- log(movie_data$intgross_2013)

log_lm_model <- lm(log_intgross_2013 ~ binary * genre + log_budget_2013  + decade_code, data = movie_data)

summary(log_lm_model)


# Set the layout to have 1 row and 2 columns
par(mfrow = c(1, 2))

# Generate the Residuals vs Fitted plot
plot(log_lm_model, which = 1)  # 'which = 1' corresponds to Residuals vs Fitted

# Generate the QQ plot
plot(log_lm_model, which = 2)  # 'which = 2' corresponds to the Normal Q-Q plot

# Reset the plotting layout to default
par(mfrow = c(1, 1))
```

```{r, results='hide'}
# Conduct a nested F test

mod_full <- log_lm_model
mod_reduced <- lm(log_intgross_2013 ~ binary + genre + log_budget_2013 + decade_code, data = movie_data)

anova(mod_reduced, mod_full, test="F")

```

```{r, message=FALSE, results='hide'}
confint(log_lm_model)

```

```{r, message=FALSE, results='hide'}
# Create a data frame for the table
research_question_2_table <- data.frame(
  Genre = c("Action", "Comedy", "Drama", "Horror", "Other"),
  `Number of Movies in Dataset` = c(483, 498, 442, 100,  271)
)

# Transpose the table for horizontal display
transposed_table <- as.data.frame(t(research_question_2_table))
colnames(transposed_table) <- transposed_table[1, ]  # Set first row as column names
transposed_table <- transposed_table[-1, ]  # Remove the first row used as column names

# Use knitr::kable to format the horizontal table
knitr::kable(
  transposed_table,
  format = "html",  # Use "html" or "latex" depending on your R Markdown output
  row.names = TRUE,  # Include row names
  caption = "Distribution of Movies by Genre in the Dataset (Horizontal)",
  align = "c",
  booktabs = TRUE
)


```

```{r}
# Extract the model summary
lm_summary <- summary(mod_reduced)
# Create the data frame for the table
results_table <- data.frame(
  Variable = rownames(lm_summary$coefficients),
  Estimate = formatC(lm_summary$coefficients[, "Estimate"], digits = 4),
  Std_Error = formatC(lm_summary$coefficients[, "Std. Error"], digits = 4),
  t_value = round(lm_summary$coefficients[, "t value"], 3),
  p_value = ifelse(
    lm_summary$coefficients[, "Pr(>|t|)"] < 0.001,
    "<0.001",
    formatC(lm_summary$coefficients[, "Pr(>|t|)"], format = "f", digits = 3)
  )
)
# Replace interaction term format and improve readability
results_table$Variable <- gsub(":", " * ", results_table$Variable) # Replace colons with asterisks for interaction terms
results_table$Variable <- gsub("_", " ", results_table$Variable)  # Replace underscores with spaces
results_table$Variable <- gsub("`", "", results_table$Variable)  # Remove backticks
results_table$Variable <- gsub("genre", "genre ", results_table$Variable) # Add a space after "genre"
results_table$Variable <- gsub("'80-'89", " 1980s", results_table$Variable) # Convert to "1980s"
results_table$Variable <- gsub("'90-'99", " 1990s", results_table$Variable) # Convert to "1990s"
results_table$Variable <- gsub("'00-'09", " 2000s", results_table$Variable) # Convert to "2000s"
results_table$Variable <- gsub("'10-'19", " 2010s", results_table$Variable) # Convert to "2010s"
# Use knitr::kable to format the table in LaTeX
knitr::kable(
  results_table,
  format = "latex",
  caption = "Linear Regression Model Summary: All Coefficients",
  align = c("l", "c", "c", "c", "c"), # Left-align the Variable column, center others
  booktabs = TRUE,
  linesep = "",
  row.names = FALSE # Suppress row names
)

```



```{r, message=FALSE, fig.show='hide'}
# **Figure 6:** Histogram of International Gross Revenue (2013 dollars, in millions)


# Convert international gross revenue to millions
movie_data <- movie_data %>%
  mutate(intgross_2013_millions = intgross_2013 / 1e6)

# Histogram for international gross revenue in millions
ggplot(movie_data, aes(x = intgross_2013_millions)) +
  geom_histogram(fill = "steelblue", bins = 30) +
  labs(
    x = "International Gross Revenue (2013 dollars, in millions)",
    y = "Frequency"
  ) +
  ggtitle("") +
  theme_minimal()

```

```{r}
# Convert the intgross_2013$ column to numeric after removing any commas and scale to millions
movie_data$intgross_2013_millions <- as.numeric(gsub(",", "", movie_data$`intgross_2013`)) / 1e6

# Calculate average revenue by Bechdel Test result (binary) and genre
average_revenue <- movie_data %>%
  group_by(binary, genre) %>%
  summarise(mean_revenue = mean(intgross_2013_millions, na.rm = TRUE)) %>%
  ungroup()

# Grouped bar chart
ggplot(average_revenue, aes(x = genre, y = mean_revenue, fill = binary)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_y_continuous(labels = scales::dollar_format(suffix = "M")) +
  labs(
    title = "Impact of Bechdel Test Result on Revenue by Genre",
    x = "Genre",
    y = "Average International Gross Revenue (Millions 2013 USD)",
    fill = "Bechdel Test Result"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  )

```

```{r, fig.show='hide'}
# Convert the intgross_2013$ column to numeric after removing any commas and scale to millions
movie_data$intgross_2013_millions <- as.numeric(gsub(",", "", movie_data$`intgross_2013`)) / 1e6

# Faceted Box Plot
ggplot(movie_data, aes(x = binary, y = intgross_2013_millions, fill = binary)) +
  geom_boxplot(outlier.alpha = 0.5) +
  facet_wrap(~ genre, scales = "free_y") +
  scale_y_continuous(labels = scales::dollar_format(suffix = "M")) +
  labs(
    title = "International Gross Revenue by Bechdel Test Result and Genre",
    x = "Bechdel Test Result",
    y = "International Gross Revenue (2013 dollars, in millions)",
    fill = "Bechdel Test Result"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 10)
  )

```

```{r, message=FALSE, results='hide'}
vif(log_lm_model)
```


```{r}
cooks_distances <- cooks.distance(log_lm_model)
n <- nrow(movie_data)
threshold <- 4 / n
influential_points <- which(cooks_distances > threshold)

plot(cooks_distances, type = "h", main = "", 
     ylab = "Cook's Distance", xlab = "Index")

abline(h = threshold, col = "red", lty = 2)

influential_indices <- which(cooks_distances > threshold)
points(influential_indices, cooks_distances[influential_indices], col = "red", pch = 19)


```

```{r, results='hide'}
# Log model without outliers

movie_data_no_influential <- movie_data[-influential_points, ]
lm_log_model_without_extreme <- lm(log_intgross_2013 ~ binary * genre + log_budget_2013 + decade_code, data = movie_data_no_influential)
summary(lm_log_model_without_extreme)
```


# 6. References

1.  Bechdel, A. (1985). Dykes to Watch Out For. *First published as a comic strip in The Essential Dykes to Watch Out For.*
2.  Motion Picture Association. (2023). *THEME Report: A Comprehensive Analysis of the Global Film Industry.*
3.  Smith, S. L., Choueiti, M., & Pieper, K. (2022). *Inequality in 1,300 Popular Films: Examining Gender, Race, & Ethnicity.* USC Annenberg Inclusion Initiative.
4.  Lauzen, M. M. (2021). *The Celluloid Ceiling: Behind-the-Scenes Employment of Women on the Top 250 Films of 2020.* Center for the Study of Women in Television & Film, San Diego State University.
